"""Functions for taking a table of class scores generated by the 
PNW-Cnet model and extracting a set of apparent detections of one or
more target classes.
See target_classes.csv for a complete list of sonotypes detected by
PNW-Cnet v4 and v5 and their corresponding labels.
"""

import os
import re
import sys
from datetime import datetime, timedelta
import pandas as pd

import pycnet.file as file

def getClipInfo(clip_name):
    """Extract information from the name of a spectrogram image file.
    
    Returns info as a dictionary.
    Clip names will be in the form [Area]_[Site]-[Stn]_[Date]_[Time]_part_[part].png
    e.g. COA_23459-C_20230316_081502_part_001.png
    """
    clip_vals = re.split(pattern="[-._]", string=clip_name)
    if len(clip_vals) != 8:
        return
    else:
        val_names = ["Area", "Site", "Stn", "Part"]
        clip_dict = dict(zip(["Area", "Site", "Stn"], clip_vals[:3]))
        str_datetime = '_'.join(clip_vals[3:5])
        clip_dict["Timestamp"] = datetime.strptime(str_datetime, "%Y%m%d_%H%M%S")
        clip_dict["Part"] = clip_vals[6]
        return clip_dict


def readReviewSettings(review_settings_file):
    """Read in a CSV and return a dict mapping threshold to class.
    
    Arguments:
    <review_settings_file>: should be a CSV file with one field <Class>
    containing the codes of the classes to be included in the review
    file and one field <Threshold> containing the score threshold to
    use for each class.
    """
    try:
        df = pd.read_csv(review_settings_file)
        settings_dict = dict(zip(df["Class"], df["Threshold"]))
        return settings_dict
    except:
        print("Could not determine intended settings.")
        return


def getApparentDetections(pred_table, class_code, score_threshold):
    """Find apparent detections of <class_code> in <pred_table>."""
    class_names = list(pred_table.keys())[1:]
    if not class_code in class_names:
        dets = pd.DataFrame()
    elif not 0 < score_threshold <= 1:
        dets = pd.DataFrame()
    else:
        dets = pred_table[pred_table[class_code] >= score_threshold]
    return dets


def buildClipDataFrame(pred_table):
    """Extract basic information about clips in the predictions table."""
    clips = pred_table["Filename"]
    clip_df = pd.DataFrame(data = [getClipInfo(clip) for clip in clips])
    clip_df["Filename"] = clips
    day_1 = min(clip_df["Timestamp"])
    clip_df["Rec_Day"] = [(date - day_1).days + 1 for date in clip_df["Timestamp"]]
    clip_df["Rec_Week"] = [int((day - 1) / 7.) + 1 for day in clip_df["Rec_Day"]]
    return clip_df


def makeReviewTable(pred_table, pred_settings, timescale="weekly"):
    """Extract apparent detections from a set of class scores.
    
    Arguments:
    
    <pred_table>: a set of class scores as generated by makePredictions
    
    <pred_settings>: a dictionary mapping target classes to score 
    thresholds, such that any row where the score for a class exceeds 
    the score threshold for that class will be considered an apparent 
    detection of that class and included in the review table.
    Apparent detections will be extracted in the order that the classes
    appear in <pred_settings>.
    """
    clip_df = buildClipDataFrame(pred_table)
    
    review_df = pd.DataFrame()
    
    for i in pred_settings:
        class_code, class_threshold = i, pred_settings[i]
        review_rows = getApparentDetections(pred_table, class_code, class_threshold)
        if not review_rows.empty:
            n_rows = len(review_rows)
            review_rows["Class"] = [class_code for j in range(n_rows)]
            review_rows["Threshold"] = [str(class_threshold) for k in range(n_rows)]
            review_df = pd.concat([review_df, review_rows])
    
    review_df = review_df.merge(right=clip_df, on="Filename", how="left")
    
    return review_df
    
    